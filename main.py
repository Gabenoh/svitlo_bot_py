import logging
import cairosvg
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor, exceptions
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, WebDriverException
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import time
from constants import TOKEN, admin
from utils import *
from db import *

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename='/home/galmed/svitlograf/logs/svitlo.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebDriver
def create_driver():
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # –ó–∞–ø—É—Å–∫–∞—î –±—Ä–∞—É–∑–µ—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    print('—Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –¥—Ä–∞–π–≤–µ—Ä')
    return webdriver.Chrome(options=options)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebDriver
driver = create_driver()
requests_count = 0
max_requests_before_restart = 100  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ WebDriver –ø—ñ—Å–ª—è 100 –∑–∞–ø–∏—Ç—ñ–≤

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add(KeyboardButton('/all_user_list'))
admin_keyboard.add(KeyboardButton('/send_tomorrow_graf_all'))
admin_keyboard.add(KeyboardButton('/send_today_graf_all'))
admin_keyboard.add(KeyboardButton('21010148'))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞.")

@dp.message_handler(commands=['all_user_list', '–≤—Å—ñ'])
async def add_command(message: types.Message):
    if await admin(message.from_user.id):
        user_list = get_all_user()
        for row in user_list:
            await message.reply(f"‚Ññ{row['id']}, user {row['user']}, \n turn - {row['turn']}")

@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    if await admin(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω!", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

@dp.message_handler(commands=['send_tomorrow_graf_all'])
async def send_all_tomorrow(message: types.Message):
    if await admin(message.from_user.id):
        await send_daily_message()

@dp.message_handler(commands=['send_today_graf_all'])
async def send_all_today_(message: types.Message):
    if await admin(message.from_user.id):
        await send_daily_message(day='todayGraphId')

@dp.message_handler(commands=['send_message_all'])
async def send_all_message(message: types.Message):
    if await admin(message.from_user.id):
        try:
            message_text = message.get_args()
            if not message_text:
                await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /send_message_all")
                return

            user_list = get_all_user()

            for user in user_list:
                try:
                    await bot.send_message(chat_id=user['user'], text=message_text)
                    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_text} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['user']}")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user']}: {e}")
            await message.reply("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
            await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")

async def send_message_to_all():
    user_list = get_all_user()
    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–∫–ª—é—á–µ–Ω—å")
    for user in user_list:
        try:
            await bot.send_message(chat_id=user['user'], text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ '
                                                              '—Å–∞–π—Ç—ñ —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ —Å–≤—ñ—Ç–ª–æ –≤–µ—Å—å –¥–µ–Ω—å')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.: {e}")

@dp.message_handler()
async def get_schedule(message: types.Message):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –π–æ–≥–æ –≤ –±–∞–∑—É –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    global driver, requests_count
    user_number = message.text.strip()

    logger.info(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name, message.from_user.last_name}'
                f'–Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_number}')

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –Ω–µ –±—ñ–ª—å—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤
    if not user_number.isdigit():
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ —Ü–∏—Ñ—Ä.")
        return

    if len(user_number) > 8:
        await message.reply("–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    if requests_count >= max_requests_before_restart:
        driver.quit()
        driver = create_driver()
        requests_count = 0

    for day_time in ["todayGraphId", 'tomorrowGraphId']:
        try:
            # –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–∞–π—Ç
            driver.get("https://svitlo.oe.if.ua")
            requests_count += 1

            # –ó–Ω–∞–π–¥—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —ñ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä
            number_input = driver.find_element(By.ID, "searchAccountNumber")
            number_input.send_keys(user_number)

            # –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
            submit_button = driver.find_element(By.ID, "accountNumberReport")
            submit_button.click()

            time.sleep(5)  # –ó–∞—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è

            # –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_element = driver.find_element(By.ID, day_time)
            svg_code = result_element.get_attribute('outerHTML')
            with open('/home/galmed/svitlograf/chart.svg', 'w') as file:
                file.write(svg_code)

            # –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–æ—Ä–æ—á–µ–Ω–æ—ó —á–µ—Ä–≥–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å
            min_turn = turn_abbreviated_check('/home/galmed/svitlograf/chart.svg')
            check_user(message.from_user.id, user_number, min_turn)
            remove_elements_before_first_gt('/home/galmed/svitlograf/chart.svg')

            # –®–ª—è—Ö –¥–æ SVG —Ñ–∞–π–ª—É
            svg_file_path = '/home/galmed/svitlograf/chart.svg'
            png_file_path = '/home/galmed/svitlograf/chart.png'
            if '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –ì—Ä–∞—Ñ—ñ–∫–∞ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ' in str(svg_code):
                await message.reply(text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ '
                                         '—Å–∞–π—Ç—ñ —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å')
                return None
            if '–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö –≤–∏–º–∫–Ω–µ–Ω—å' in svg_code:
                await message.reply(f'–í–∞—à–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {tomorowdate()} —â–µ –Ω–µ–º–∞—î')
                break
            elif day_time == 'tomorrowGraphId':
                await message.reply(text=f'–í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {tomorowdate()} üëá')
            elif day_time == 'todayGraphId':
                await message.reply(text=f'–í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ {todaydate()} üëá')
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è SVG –≤ PNG
            cairosvg.svg2png(url=svg_file_path, write_to=png_file_path)

            # –í—ñ–¥–ø—Ä–∞–≤—Ç–µ PNG —Ñ–∞–π–ª —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            # –°—Ç–≤–æ—Ä—ñ—Ç—å InputFile –æ–±'—î–∫—Ç –¥–ª—è PNG —Ñ–∞–π–ª—É
            png_file = InputFile(png_file_path)
            await message.reply_photo(photo=png_file)

        except NoSuchElementException:
            await message.reply('–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å. '
                                '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
            logger.error("Error in get_schedule: "
                         "–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å.")
        except WebDriverException as e:
            logger.error(f"WebDriver exception: {e}")
            await message.reply("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception as e:
            await message.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
            logger.error(f"Error in get_schedule: {e}")

async def send_daily_message(day='tomorrowGraphId'):
    global driver, requests_count
    user_list = get_all_user()
    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
    for user in user_list:
        try:
            if datetime.datetime.now().time().hour >= 22:
                logger.warning("–ß–∞—Å –ø–µ—Ä–µ–≤–∏—â—É—î 22:00, –∑—É–ø–∏–Ω–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
                await send_message_to_all()
                return None

            if requests_count >= max_requests_before_restart:
                driver.quit()
                driver = create_driver()
                requests_count = 0

            # –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–∞–π—Ç
            driver.get("https://svitlo.oe.if.ua")
            requests_count += 1

            # –ó–Ω–∞–π–¥—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —ñ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä
            number_input = driver.find_element(By.ID, "searchAccountNumber")
            number_input.send_keys(user['turn'])

            # –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
            submit_button = driver.find_element(By.ID, "accountNumberReport")
            submit_button.click()

            time.sleep(5)  # –ó–∞—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è

            # –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_element = driver.find_element(By.ID, day)
            svg_code = result_element.get_attribute('outerHTML')

            if '–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö' in str(svg_code) or '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ' in str(svg_code):
                logger.warning(f"–©–µ –Ω–µ –º–∞—î –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–ª—è {user['user']}")
                await asyncio.sleep(300)
                await asyncio.create_task(send_daily_message())
                break

            with open('chart.svg', 'w') as file:
                file.write(svg_code)

            remove_elements_before_first_gt('/home/galmed/svitlograf/chart.svg')

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–æ—Ä–æ—á–µ–Ω–æ—ó —á–µ—Ä–≥–∏
            turn_abbreviated = turn_abbreviated_check('/home/galmed/svitlograf/chart.svg')
            add_users_turn_abbreviated(user_id=user['id'], turn_abbreviated=turn_abbreviated)

            # –®–ª—è—Ö –¥–æ SVG —Ñ–∞–π–ª—É
            svg_file_path = '/home/galmed/svitlograf/chart.svg'
            png_file_path = '/home/galmed/svitlograf/chart.png'

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è SVG –≤ PNG
            cairosvg.svg2png(url=svg_file_path, write_to=png_file_path)

            # –í—ñ–¥–ø—Ä–∞–≤—Ç–µ PNG —Ñ–∞–π–ª —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            # –°—Ç–≤–æ—Ä—ñ—Ç—å InputFile –æ–±'—î–∫—Ç –¥–ª—è PNG —Ñ–∞–π–ª—É
            png_file = InputFile(png_file_path)
            if day == 'tomorrowGraphId':
                await bot.send_message(chat_id=user['user'],
                                       text=f'–í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {tomorowdate()} üëá')
            elif day == 'todayGraphId':
                await bot.send_message(chat_id=user['user'],
                                       text=f'–û–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ {todaydate()} üëá')
            await bot.send_photo(chat_id=user['user'], photo=png_file)
            logger.info(f"–©–æ–¥–µ–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['user']}, –∑ ID: {user['id']}")

        except exceptions.BotBlocked:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞: {user['user']}")
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        except WebDriverException as e:
            logger.error(f"WebDriver exception: {e}")
            await asyncio.sleep(900)
            await asyncio.create_task(send_daily_message())
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await asyncio.sleep(900)
            await asyncio.create_task(send_daily_message())


async def check_website_updates(last_color_list=None, turn='4.1'):
    global driver, requests_count
    check_number = get_first_user_with_turn_abbreviated(turn_abbreviated_value=turn)
    logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å –≥—Ä–∞—Ñ—ñ–∫—É –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è —á–µ—Ä–≥–∏ {turn}, –∑ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É {check_number}")
    while True:
        try:
            if requests_count >= max_requests_before_restart:
                driver.quit()
                driver = create_driver()
                requests_count = 0

            # –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–∞–π—Ç
            driver.get("https://svitlo.oe.if.ua")
            requests_count += 1

            number_input = driver.find_element(By.ID, "searchAccountNumber")
            number_input.send_keys(check_number)

            # –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
            submit_button = driver.find_element(By.ID, "accountNumberReport")
            submit_button.click()

            time.sleep(10)  # –ó–∞—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è

            # –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_element = driver.find_element(By.ID, 'todayGraphId')
            svg_code = result_element.get_attribute('outerHTML')
            color_list = extract_colors_from_svg(svg_code)


            if last_color_list is None:
                last_color_list = color_list

            if last_color_list != color_list:
                logger.info("–ó–Ω–∞–π–¥–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ, —Ä–æ–∑—Å–∏–ª–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫")
                with open(f'/home/galmed/svitlograf/chart{turn}.svg', 'w') as file:
                    file.write(svg_code)
                last_color_list = color_list
                await send_update_graph(turn=turn,svg_file_path=f'/home/galmed/svitlograf/chart{turn}.svg')

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω—å —Å–∞–π—Ç—É: {e}")

        await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω


async def send_update_graph(day='todayGraphId',turn=None,svg_file_path=None):
    global driver, requests_count
    user_list = get_all_user_with_turn(turn)
    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –û–ù–û–í–õ–ï–ù–ò–• –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
    remove_elements_before_first_gt(svg_file_path)
    for user in user_list:
        try:
            if datetime.datetime.now().time().hour <= 6:
                logger.warning("–ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è –∑–º—ñ–Ω–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.")
                return None

            if requests_count >= max_requests_before_restart:
                driver.quit()
                driver = create_driver()
                requests_count = 0

            # –®–ª—è—Ö –¥–æ SVG —Ñ–∞–π–ª—É
            png_file_path = f'/home/galmed/svitlograf/chart{turn}.png'

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è SVG –≤ PNG
            cairosvg.svg2png(url=svg_file_path, write_to=png_file_path)

            # –í—ñ–¥–ø—Ä–∞–≤—Ç–µ PNG —Ñ–∞–π–ª —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            # –°—Ç–≤–æ—Ä—ñ—Ç—å InputFile –æ–±'—î–∫—Ç –¥–ª—è PNG —Ñ–∞–π–ª—É
            png_file = InputFile(png_file_path)

            if day == 'todayGraphId':
                await bot.send_message(chat_id=user['user'],
                                       text=f'–û–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ {todaydate()} üëá')
            await bot.send_photo(chat_id=user['user'], photo=png_file)
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['user']}, –∑ ID: {user['id']}"
                        f" —á–µ—Ä–≥–æ—é - {user['turn_abbreviated']}")
        except exceptions.BotBlocked:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞: {user['user']}")
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        except WebDriverException as e:
            logger.error(f"WebDriver exception: {e}")
            await asyncio.sleep(900)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            break

def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_daily_message, 'cron', hour=17, minute=22)  # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ 17:22 –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
    scheduler.start()

    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∞–π—Ç—É –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    loop = asyncio.get_event_loop()
    turn_list = get_unique_abbreviated_turns()
    for i in turn_list:
        loop.create_task(check_website_updates(turn=i))


    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)

if __name__ == '__main__':
    main()
