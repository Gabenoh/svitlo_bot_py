import logging
import datetime
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor, exceptions
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, WebDriverException
from selenium.common.exceptions import TimeoutException
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from constants import TOKEN, admin
from utils import *
from db import *

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename='/home/galmed/svitlograf/logs/svitlo.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebDriver
def create_driver():
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--window-size=1920,1080')
    print('—Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –¥—Ä–∞–π–≤–µ—Ä')
    return webdriver.Chrome(options=options)


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebDriver
driver = create_driver()
requests_count = 0
max_requests_before_restart = 100
WAIT_TIMEOUT = 25  # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è WebDriverWait

# --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –õ–û–ö–ê–¢–û–†–ò (–û–°–¢–ê–¢–û–ß–ù–Ü –†–û–ë–û–ß–Ü) ---
INPUT_FIELD_LOCATOR = (By.NAME, "personalAccount")
SUBMIT_BUTTON_LOCATOR = (By.XPATH, "//button[contains(., '–î—ñ–∑–Ω–∞—Ç–∏—Å—å —á–µ—Ä–≥—É')]")
DIALOG_LOCATOR = (By.XPATH, "//div[contains(@class, 'MuiDialog-root') and contains(., '–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö')]")
TODAY_CONTAINER_XPATH = "//div[contains(@class, 'MuiDialogContent-root')]//div[contains(@class, '_graph_qwrgv')][1]"
TOMORROW_CONTAINER_XPATH = "//div[contains(@class, 'MuiDialogContent-root')]//div[contains(@class, '_graph_qwrgv')][2]"

# –ù–ê–ô–ë–Ü–õ–¨–® –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô –õ–û–ö–ê–¢–û–† –ó–ê–ì–û–õ–û–í–ö–ê
DIALOG_HEADER_LOCATOR = (By.XPATH, f"{DIALOG_LOCATOR[1]}//div[contains(., '–°—Ç–∞–Ω–æ–º –Ω–∞')]")


# === –û–ù–û–í–õ–ï–ù–ê –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ê –§–£–ù–ö–¶–Ü–Ø –°–ï–õ–ï–ù–Ü–£–ú–£ ===
def get_schedule_from_site(user_number: str):
    """
    –í–∏–∫–æ–Ω—É—î –≤—Å—ñ –∫—Ä–æ–∫–∏ Selenium: –í–Ü–î–ö–†–ò–¢–¢–Ø –°–ê–ô–¢–£ –ó –ù–£–õ–Ø, –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞, –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞.
    """
    global driver, requests_count

    wait_local = WebDriverWait(driver, WAIT_TIMEOUT)

    # 1. –ü–ï–†–ï–í–Ü–†–ö–ê –Ü –ü–ï–†–ï–ó–ê–ü–£–°–ö –î–†–ê–ô–í–ï–†–ê (–∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ)
    if requests_count >= max_requests_before_restart:
        driver.quit()
        driver = create_driver()
        requests_count = 0

    # 2. –í–Ü–î–ö–†–ò–¢–¢–Ø –°–ê–ô–¢–£ –ó –ù–£–õ–Ø (–ö–û–ñ–ù–û–ì–û –†–ê–ó–£)
    driver.get("https://svitlo.oe.if.ua")
    requests_count += 1

    # 3. –í–í–ï–î–ï–ù–ù–Ø –ù–û–ú–ï–†–ê
    number_input = wait_local.until(EC.element_to_be_clickable(INPUT_FIELD_LOCATOR))
    slow_type(number_input, user_number, delay=0.1)

    # 4. –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ö–ù–û–ü–ö–ò
    submit_button = wait_local.until(EC.element_to_be_clickable(SUBMIT_BUTTON_LOCATOR))
    submit_button.click()

    # 5. –û–ß–Ü–ö–£–í–ê–ù–ù–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê
    wait_local.until(EC.visibility_of_element_located(DIALOG_LOCATOR))
    time.sleep(2)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É

    # –î—Ä–∞–π–≤–µ—Ä –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ


def parse_schedule(driver, container_xpath, day_name, known_turn=None):
    """
    –í–∏—Ç—è–≥—É—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ —á–∞—Å—É —Ç–∞ –ø–∞—Ä—Å–∏—Ç—å —á–µ—Ä–≥—É.
    –Ø–∫—â–æ known_turn –ø–µ—Ä–µ–¥–∞–Ω–æ, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —à—É–∫–∞—î—Ç—å—Å—è.
    """
    # –î–æ–≤–≥–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ—à—É–∫—É —á–µ—Ä–≥–∏, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º–∞
    local_wait_header = WebDriverWait(driver, 20)
    # –î–æ–≤–≥–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ó–∞–≤—Ç—Ä–∞
    local_wait_content = WebDriverWait(driver, 15)

    CONTAINER_LOCATOR = (By.XPATH, container_xpath)

    # REGEX –¥–ª—è —á–∞—Å—É (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, —â–æ –ø—Ä–∞—Ü—é—î –∑ '‚Äî‚Äî' –∞–±–æ '--')
    RE_TIME_INTERVAL_FINAL = re.compile(r"(\d{2}:\d{2})\s*[‚Äî\-]{2,}\s*(\d{2}:\d{2})")

    min_turn = known_turn if known_turn is not None else "N/A"

    try:
        # --- 1. –ü–ê–†–°–ò–ù–ì –ß–ï–†–ì–ò –ó –ó–ê–ì–û–õ–û–í–ö–ê (–¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –ß–ï–†–ì–ê –ù–ï –í–Ü–î–û–ú–ê) ---
        if known_turn is None:
            header_element = local_wait_header.until(EC.presence_of_element_located(DIALOG_HEADER_LOCATOR))
            header_text = header_element.text

            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ª–∞–ø–∫–∏
            normalized_text = header_text.replace('\u2019', "'").replace('\x27', "'")

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ split –∑–∞ —Å–∏–º–≤–æ–ª–æ–º –æ–¥–∏–Ω–∞—Ä–Ω–æ—ó –ª–∞–ø–∫–∏ "'"
            if normalized_text.count("'") >= 4:
                min_turn = normalized_text.split("'")[3]
                min_turn = min_turn.strip().rstrip('.')

        # --- 2. –ü–ê–†–°–ò–ù–ì –ì–†–ê–§–Ü–ö–£ –ó –ö–û–ù–¢–ï–ô–ù–ï–†–ê ---
        container_element = local_wait_content.until(EC.presence_of_element_located(CONTAINER_LOCATOR))
        full_text = container_element.text.replace('\n', ' ').strip()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–∫–ª—é—á–µ–Ω—å (–ù–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è)
        if "–ù–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è" in full_text:
            return f"üü¢ –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è {day_name} –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è.", min_turn

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è"
        if "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è" in full_text:
            return f"‚ùå –ì—Ä–∞—Ñ—ñ–∫ –Ω–∞ {day_name} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ô–º–æ–≤—ñ—Ä–Ω–æ, —Å–≤—ñ—Ç–ª–æ –±—É–¥–µ.", min_turn

        # 3. –ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ —á–∞—Å—É
        matches_time = RE_TIME_INTERVAL_FINAL.findall(full_text)

        if matches_time:
            schedule_times = [f"{start_time} ‚Äî {end_time}" for start_time, end_time in matches_time]
            formatted_times = "\n".join(schedule_times)
            return f"–ß–µ—Ä–≥–∞ {min_turn} ({day_name.capitalize()}):\n{formatted_times}", min_turn
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω—ñ —á–∞—Å—É, –Ω—ñ –Ω–∞–ø–∏—Å—É –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            return f"üí° –ì—Ä–∞—Ñ—ñ–∫ –Ω–∞ {day_name} –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Ä—É—á–Ω—É.", min_turn

    except TimeoutException:
        logger.error(f"Timeout –ø—Ä–∏ –ø–æ—à—É–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {day_name}. –õ–æ–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {CONTAINER_LOCATOR}")
        return f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞ {day_name} –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (Timeout).", "N/A"
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É {day_name}: {e}")
        return f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö ({day_name}).", "N/A"

# --- –•–ï–ù–î–õ–ï–†–ò –ë–û–¢–ê ---

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞.")


@dp.message_handler(commands=['all_user_list', '–≤—Å—ñ'])
async def add_command(message: types.Message):
    if await admin(message.from_user.id):
        user_list = get_all_user()
        for row in user_list:
            await message.reply(f"‚Ññ{row['id']}, user {row['user']}, \n turn - {row['turn']}")


@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    if await admin(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω!", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")


@dp.message_handler(commands=['send_tomorrow_graf_all'])
async def send_all_tomorrow(message: types.Message):
    if await admin(message.from_user.id):
        await send_daily_message(day='tomorrow')
        await message.reply("–†–æ–∑—Å–∏–ª–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞.")


@dp.message_handler(commands=['send_today_graf_all'])
async def send_all_today_(message: types.Message):
    if await admin(message.from_user.id):
        await send_daily_message(day='today')
        await message.reply("–†–æ–∑—Å–∏–ª–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø—É—â–µ–Ω–∞.")


@dp.message_handler(commands=['send_message_all'])
async def send_all_message(message: types.Message):
    if await admin(message.from_user.id):
        try:
            message_text = message.get_args()
            if not message_text:
                await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /send_message_all")
                return

            user_list = get_all_user()

            for user in user_list:
                try:
                    await bot.send_message(chat_id=user['user'], text=message_text)
                    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_text} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['user']}")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user']}: {e}")
            await message.reply("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
            await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")

async def send_message_to_all():
    user_list = get_all_user()
    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–∫–ª—é—á–µ–Ω—å")
    for user in user_list:
        try:
            await bot.send_message(chat_id=user['user'], text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüí° –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ '
                                                              '—Å–∞–π—Ç—ñ, —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ —Å–≤—ñ—Ç–ª–æ –≤–µ—Å—å –¥–µ–Ω—å')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.: {e}")


@dp.message_handler()
async def get_schedule(message: types.Message):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É, –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞."""
    user_number = message.text.strip()
    user_number_str = str(user_number)

    logger.info(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name, message.from_user.last_name}'
                f' –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_number}')

    if not user_number.isdigit() or len(user_number) > 8:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É (–¥–æ 8 —Ü–∏—Ñ—Ä).")
        return

    final_min_turn = "N/A"
    schedule_results = []

    try:
        # === –ö–†–û–ö 1-3: –í–•–Ü–î –ù–ê –°–ê–ô–¢ –¢–ê –û–ß–Ü–ö–£–í–ê–ù–ù–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥) ===
        get_schedule_from_site(user_number_str)

        # === –ö–†–û–ö 4: –ü–ê–†–°–ò–ù–ì –ì–†–ê–§–Ü–ö–Ü–í ===

        # –°—å–æ–≥–æ–¥–Ω—ñ (–í–ø–µ—Ä—à–µ —à—É–∫–∞—î–º–æ —á–µ—Ä–≥—É)
        today_text, min_turn = parse_schedule(driver, TODAY_CONTAINER_XPATH, "–°—å–æ–≥–æ–¥–Ω—ñ")
        schedule_results.append((f'–í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüí° –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ {todaydate()} üëá', today_text))
        final_min_turn = min_turn

        # –ó–∞–≤—Ç—Ä–∞ (–ß–µ—Ä–≥–∞ –≤–∂–µ –≤—ñ–¥–æ–º–∞, –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—ó)
        tomorrow_text, _ = parse_schedule(driver, TOMORROW_CONTAINER_XPATH, "–ó–∞–≤—Ç—Ä–∞", known_turn=final_min_turn)
        schedule_results.append((f'–í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüí° –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {tomorowdate()} üëá', tomorrow_text))

        # === –ö–†–û–ö 6: –í–Ü–î–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í ===
        if final_min_turn != "N/A":
            check_user(message.from_user.id, user_number, final_min_turn)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–≥—É –≤ –±–∞–∑—É

        for prefix, schedule_text in schedule_results:
            await message.reply(text=f'{prefix}\n\n{schedule_text}')

    except NoSuchElementException:
        await message.reply('–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å. '
                            '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        logger.error("Error in get_schedule: –ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å.")
    except TimeoutException:
        await message.reply('–¢–∞–π–º–∞—É—Ç: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫. –ú–æ–∂–ª–∏–≤–æ, —Å–∞–π—Ç –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
        logger.error("Error in get_schedule: Timeout when loading schedule.")
    except WebDriverException as e:
        logger.error(f"WebDriver exception: {e}")
        await message.reply("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        await message.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
        logger.error(f"Error in get_schedule: {e}")


async def process_and_update_turn(user_data):
    """–û—Ç—Ä–∏–º—É—î —á–µ—Ä–≥—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –æ–Ω–æ–≤–ª—é—î —ó—ó –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    global driver
    user_number_str = user_data['turn']
    user_id = user_data['user']
    db_id = user_data['id']  # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π ID –∑–∞–ø–∏—Å—É

    final_min_turn = "N/A"

    try:
        # === –ö–†–û–ö 1-3: –í–•–Ü–î –ù–ê –°–ê–ô–¢ –¢–ê –û–ß–Ü–ö–£–í–ê–ù–ù–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥) ===
        get_schedule_from_site(user_number_str)

        # === –ö–†–û–ö 4: –ü–ê–†–°–ò–ù–ì –ß–ï–†–ì–ò (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –°—å–æ–≥–æ–¥–Ω—ñ) ===
        # –ú–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ known_turn=None, —â–æ–± —Ñ–æ—Ä—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        _, min_turn = parse_schedule(driver, TODAY_CONTAINER_XPATH, "–°—å–æ–≥–æ–¥–Ω—ñ", known_turn=None)
        final_min_turn = min_turn

        # === –ö–†–û–ö 6: –û–ù–û–í–õ–ï–ù–ù–Ø –í –ë–ê–ó–Ü –î–ê–ù–ò–• ===
        if final_min_turn != "N/A" and final_min_turn != user_data.get('turn_abbreviated'):
            add_users_turn_abbreviated(user_id=db_id, turn_abbreviated=final_min_turn)
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {user_number_str} -> {final_min_turn}")
            return f"‚úÖ {user_number_str}: {final_min_turn}"

        return f"‚ÑπÔ∏è {user_number_str}: –ß–µ—Ä–≥–∞ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–≥–∏ –¥–ª—è {user_number_str} ({user_id}): {e}")
        return f"‚ùå {user_number_str}: –ü–æ–º–∏–ª–∫–∞ ({e.__class__.__name__})"


@dp.message_handler(commands=['update_all_turns'])
async def update_all_turns_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–æ—Ä–æ—á–µ–Ω–∏—Ö —á–µ—Ä–≥."""
    if await admin(message.from_user.id):
        await message.reply("üöÄ –†–æ–∑–ø–æ—á–∞—Ç–æ –º–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–æ—Ä–æ—á–µ–Ω–∏—Ö —á–µ—Ä–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —á–∞—Å...")

        user_list = get_all_user()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        results = []

        for user in user_list:
            await asyncio.sleep(5)

            result = await process_and_update_turn(user)
            results.append(result)

            if len(results) % 10 == 0:
                await message.answer(f"–ü—Ä–æ–º—ñ–∂–Ω–∏–π –∑–≤—ñ—Ç ({len(results)}/{len(user_list)}):\n" + "\n".join(results[-10:]))

        await message.answer(
            f"‚úÖ –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–æ–≤–ª–µ–Ω–æ {len([r for r in results if r.startswith('‚úÖ')])} –∑–∞–ø–∏—Å—ñ–≤ –∑ {len(user_list)}.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")


async def send_daily_message(day='tomorrow'):
    """–ù–∞–¥—Å–∏–ª–∞—î –≥—Ä–∞—Ñ—ñ–∫ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (—Ç–µ–∫—Å—Ç–æ–º)"""
    global driver
    user_list = get_all_user()
    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –Ω–∞ {day}")

    if day == "today":
        container_xpath = TODAY_CONTAINER_XPATH
        message_prefix = f'–û–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüí° –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ {todaydate()} üëá'
        day_name = "–°—å–æ–≥–æ–¥–Ω—ñ"
    else:
        container_xpath = TOMORROW_CONTAINER_XPATH
        message_prefix = f'–í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüí° –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {tomorowdate()} üëá'
        day_name = "–ó–∞–≤—Ç—Ä–∞"

    for user in user_list:
        try:
            user_number_str = user['turn']
            known_turn = user.get('turn_abbreviated')

            # === –ö–†–û–ö 1-3: –í–•–Ü–î –ù–ê –°–ê–ô–¢ –¢–ê –û–ß–Ü–ö–£–í–ê–ù–ù–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥) ===
            get_schedule_from_site(user_number_str)

            # === –ö–†–û–ö 4: –ü–ê–†–°–ò–ù–ì –ì–†–ê–§–Ü–ö–£ ===
            schedule_text, turn_abbreviated = parse_schedule(driver, container_xpath, day_name, known_turn=known_turn)

            # === –ö–†–û–ö 6: –í–Ü–î–ü–†–ê–í–ö–ê ===
            if "‚ùå –ì—Ä–∞—Ñ—ñ–∫ –Ω–∞" in schedule_text or "üí° –ì—Ä–∞—Ñ—ñ–∫ –Ω–∞" in schedule_text:
                logger.info(f"–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π/–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è {user['user']}")
                continue

            # –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–≥—É –≤ –±–∞–∑—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É
            if turn_abbreviated != "N/A" and known_turn is None:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π id, –∞ –Ω–µ —Ç–µ–ª–µ–≥—Ä–∞–º id
                add_users_turn_abbreviated(user_id=user['id'], turn_abbreviated=turn_abbreviated)

            await bot.send_message(chat_id=user['user'],
                                   text=f'{message_prefix}\n\n{schedule_text}')

            logger.info(f"–©–æ–¥–µ–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['user']}")

        except exceptions.BotBlocked:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞: {user['user']}")
            continue
        except WebDriverException as e:
            logger.error(f"WebDriver exception –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user['user']}: {e}")
            continue
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user']}: {e}")
            continue


async def check_website_updates(turn='4.2'):  # last_schedule_text –≤–∏–¥–∞–ª–µ–Ω–æ!
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ."""
    global driver
    check_number = get_first_user_with_turn_abbreviated(turn_abbreviated_value=turn)
    logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å –≥—Ä–∞—Ñ—ñ–∫—É –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è —á–µ—Ä–≥–∏ {turn}, –∑ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É {check_number}")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ JSON
    last_schedule_text = get_last_schedule(turn)
    if last_schedule_text is None:
        logger.info(f"–ö–µ—à –¥–ª—è —á–µ—Ä–≥–∏ {turn} –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫.")

    while True:
        try:
            # 1. –í–•–Ü–î –ù–ê –°–ê–ô–¢ –¢–ê –û–ß–Ü–ö–£–í–ê–ù–ù–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê
            get_schedule_from_site(check_number)

            # 2. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¢–ï–ö–°–¢)
            schedule_text, _ = parse_schedule(driver, TODAY_CONTAINER_XPATH, "–°—å–æ–≥–æ–¥–Ω—ñ", known_turn=turn)

            current_schedule_text = schedule_text

            # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            normalized_text = " ".join(current_schedule_text.split()).strip()
            # –î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, –º–∏ —Ç–∞–∫–æ–∂ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
            normalized_last_text = " ".join(last_schedule_text.split()).strip() if last_schedule_text else None

            logger.info(f'–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è —á–µ—Ä–≥–∏ {turn} (–ø–æ—á–∞—Ç–æ–∫): {normalized_text[:100]}...')

            # --- –õ–û–ì–Ü–ö–ê –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –¢–ê –û–ù–û–í–õ–ï–ù–ù–Ø ---

            # 1. –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ (–Ω–µ–º–∞—î –∫–µ—à—É) –ê–ë–û —Ç–µ–∫—Å—Ç –∑–º—ñ–Ω–∏–≤—Å—è
            is_changed = normalized_text != normalized_last_text

            # 2. –Ü–≥–Ω–æ—Ä—É—î–º–æ "–ø–æ—Ä–æ–∂–Ω—ñ" –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            is_valid_schedule = "‚ùå –ì—Ä–∞—Ñ—ñ–∫ –Ω–∞" not in normalized_text and "üí° –ì—Ä–∞—Ñ—ñ–∫ –Ω–∞" not in normalized_text

            if is_valid_schedule and (last_schedule_text is None or is_changed):
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ –¥–ª—è —á–µ—Ä–≥–∏ {turn}, —Ä–æ–∑—Å–∏–ª–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫")

                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                update_last_schedule(turn, current_schedule_text)
                last_schedule_text = current_schedule_text  # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await send_update_graph(turn=turn, schedule_text=current_schedule_text)

            # –Ø–∫—â–æ –≥—Ä–∞—Ñ—ñ–∫ –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –∞–ª–µ –±—É–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –¥—ñ–π—Å–Ω–∏–π, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —ñ –Ω–µ —Ä–æ–∑—Å–∏–ª–∞—î–º–æ
            elif not is_valid_schedule and last_schedule_text is not None:
                logger.warning(f"–ì—Ä–∞—Ñ—ñ–∫ –¥–ª—è {turn} –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –∞–ª–µ –∫–µ—à –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ.")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω—å —Å–∞–π—Ç—É –¥–ª—è —á–µ—Ä–≥–∏ {turn}: {e}")

        await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω

async def send_update_graph(turn=None, schedule_text=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (—Ç–µ–∫—Å—Ç–æ–º)"""
    user_list = get_all_user_with_turn(turn)
    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –û–ù–û–í–õ–ï–ù–ò–• –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (–ß–µ—Ä–≥–∞ {turn})")

    message_prefix = f'–û–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—åüí° –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ {todaydate()} üëá'

    for user in user_list:
        try:
            # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏ (–º–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏)
            if datetime.datetime.now().time().hour <= 6:
                logger.warning("–ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è –∑–º—ñ–Ω–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.")
                return None

            await bot.send_message(chat_id=user['user'],
                                   text=f'{message_prefix}\n\n{schedule_text}')

            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['user']}")
        except exceptions.BotBlocked:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞: {user['user']}")
            continue
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user']}: {e}")
            continue


def main():
    scheduler = AsyncIOScheduler()
    # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –æ 17:22
    scheduler.add_job(send_daily_message, trigger='cron', hour=17, minute=22, misfire_grace_time=15)
    # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –æ 6:00
    scheduler.add_job(send_daily_message, trigger='cron', hour=6, minute=0, misfire_grace_time=15,
                      kwargs={'day': 'today'})
    scheduler.start()

    loop = asyncio.get_event_loop()
    turn_list = get_unique_abbreviated_turns()
    for i in turn_list:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ç–∞—Å–∫ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–∂–Ω–æ—ó —á–µ—Ä–≥–∏
        loop.create_task(check_website_updates(turn=i))

    executor.start_polling(dp, skip_updates=True)


# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —ó—ó –ø–µ—Ä–µ–¥ main, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add(KeyboardButton('/all_user_list'))
admin_keyboard.add(KeyboardButton('/send_tomorrow_graf_all'))
admin_keyboard.add(KeyboardButton('/send_today_graf_all'))
admin_keyboard.add(KeyboardButton('/update_all_turns'))
admin_keyboard.add(KeyboardButton('21010148'))

if __name__ == '__main__':
    main()